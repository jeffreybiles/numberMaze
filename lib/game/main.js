// Generated by CoffeeScript 1.3.3
(function() {

  ig.module('game.main').requires('impact.game', 'impact.font', 'plugins.impact-storage', 'game.entities.dashboard', 'game.entities.player', 'game.entities.timer', 'game.entities.gui.rectangle', 'game.entities.gui.completedLevel', 'game.entities.gui.pauseScreen', 'game.entities.gui.startScreen', 'game.entities.gui.problemInterface', 'game.levels.intro', 'game.levels.center', 'game.levels.1', 'game.levels.2', 'game.levels.3').defines(function() {
    var MyGame;
    MyGame = ig.Game.extend({
      font: new ig.Font('media/helvetica64EEE.png'),
      storage: new ig.Storage(),
      state: 'main',
      gate: null,
      level: null,
      update: function() {
        var correct, timer;
        switch (this.state) {
          case 'main':
            this.cameraFollow();
            if (ig.input.pressed('pause')) {
              ig.game.spawnEntity(EntityPauseScreen);
            }
            break;
          case 'problem':
            if (ig.input.state('accept')) {
              correct = this.gate.checkAnswer();
              timer = this.getEntitiesByType(EntityTimer)[0];
              if (correct) {
                this.gate.reward();
                this.gate.kill();
                timer.change(5);
              } else {
                timer.change(-5);
              }
              this.gate["interface"].kill();
              this.state = 'main';
            }
            break;
          case 'paused':
            null;
        }
        if (ig.input.state('save')) {
          this.save();
        }
        return this.parent();
      },
      cameraFollow: function() {
        var player, xDifference, yDifference;
        player = this.getEntitiesByType(EntityPlayer)[0];
        if (player) {
          xDifference = player.pos.x - ig.system.width / 2;
          yDifference = player.pos.y - ig.system.height / 2;
          if (this.screen.x > xDifference + 2 || this.screen.x < xDifference - 2) {
            this.screen.x = (9 * this.screen.x + xDifference) / 10;
          } else {
            this.screen.x = xDifference;
          }
          if (this.screen.y > yDifference + 2 || this.screen.y < yDifference - 2) {
            return this.screen.y = (9 * this.screen.y + yDifference) / 10;
          } else {
            return this.screen.y = yDifference;
          }
        }
      },
      loadLevel: function(level) {
        this.parent(level);
        ig.game.spawnEntity(EntityPlayer, this.nextPlayerPosition.x, this.nextPlayerPosition.y, {});
        this.save();
        ig.game.spawnEntity(EntityDashboard);
        return this.timer = ig.game.spawnEntity(EntityTimer);
      },
      changeLevel: function(level, playerPosition) {
        ig.game.loadLevelDeferred(level);
        return this.nextPlayerPosition = playerPosition;
      },
      experienceRequired: function(level) {
        var requirements;
        requirements = {
          0: 30,
          1: 100,
          2: 200,
          3: 500,
          4: 1000,
          5: 1800,
          6: 3000,
          7: 4800,
          8: 7500
        };
        return requirements[level];
      },
      goToCenter: function() {
        this.state = 'main';
        return this.changeLevel(LevelCenter, {
          x: 700,
          y: 700
        });
      },
      init: function() {
        ig.input.bind(ig.KEY.S, 'save');
        ig.input.bind(ig.KEY.P, 'pause');
        ig.input.bind(ig.KEY.ENTER, 'accept');
        ig.input.bind(ig.KEY.UP_ARROW, 'up');
        ig.input.bind(ig.KEY.DOWN_ARROW, 'down');
        ig.input.bind(ig.KEY.LEFT_ARROW, 'left');
        ig.input.bind(ig.KEY.RIGHT_ARROW, 'right');
        ig.input.bind(ig.KEY._0, '0');
        ig.input.bind(ig.KEY._1, '1');
        ig.input.bind(ig.KEY._2, '2');
        ig.input.bind(ig.KEY._3, '3');
        ig.input.bind(ig.KEY._4, '4');
        ig.input.bind(ig.KEY._5, '5');
        ig.input.bind(ig.KEY._6, '6');
        ig.input.bind(ig.KEY._7, '7');
        ig.input.bind(ig.KEY._8, '8');
        ig.input.bind(ig.KEY._9, '9');
        ig.input.bind(ig.KEY.NUMPAD_0, '0');
        ig.input.bind(ig.KEY.NUMPAD_1, '1');
        ig.input.bind(ig.KEY.NUMPAD_2, '2');
        ig.input.bind(ig.KEY.NUMPAD_3, '3');
        ig.input.bind(ig.KEY.NUMPAD_4, '4');
        ig.input.bind(ig.KEY.NUMPAD_5, '5');
        ig.input.bind(ig.KEY.NUMPAD_6, '6');
        ig.input.bind(ig.KEY.NUMPAD_7, '7');
        ig.input.bind(ig.KEY.NUMPAD_8, '8');
        ig.input.bind(ig.KEY.NUMPAD_9, '9');
        ig.input.bind(ig.KEY.Y, 'yes');
        ig.input.bind(ig.KEY.MOUSE1, 'click');
        return this.spawnEntity(EntityStartScreen);
      },
      record: function(category, action, label, value) {
        var _i, _j, _len, _len1, _ref, _ref1, _results;
        if (label == null) {
          label = "";
        }
        if (value == null) {
          value = null;
        }
        _ref = ["addition", "subtraction", "multiplication", "division"];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          category = _ref[_i];
          label += "" + category + ":" + ig.game.stats[category].level + "  ";
        }
        _ref1 = ["money", "timeIncreases"];
        _results = [];
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          category = _ref1[_j];
          _results.push(label += "" + category + ":" + ig.game.stats[category] + "  ");
        }
        return _results;
      },
      save: function() {
        this.storage.set('stats', this.stats);
        return this.storage.set('switches', this.switches);
      },
      load: function() {
        this.switches = this.storage.isSet('switches') ? this.storage.get('switches') : {
          introComplete: false
        };
        if (this.switches.introComplete) {
          this.stats = this.storage.get('stats');
          this.goToCenter();
        } else {
          this.stats = {
            addition: {
              level: 0,
              experience: 0
            },
            subtraction: {
              level: 0,
              experience: 0
            },
            multiplication: {
              level: 0,
              experience: 0
            },
            division: {
              level: 0,
              experience: 0
            },
            timeIncreases: 0,
            money: 0
          };
          this.nextPlayerPosition = {
            x: 468,
            y: 68
          };
          this.loadLevel(LevelIntro);
        }
        return this.state = 'main';
      },
      resetEverything: function() {
        ig.game.storage.clear();
        return this.load();
      }
    });
    return ig.main('#canvas', MyGame, 60, 960, 640, 1);
  });

}).call(this);
