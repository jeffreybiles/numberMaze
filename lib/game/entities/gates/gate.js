// Generated by CoffeeScript 1.3.3
(function() {

  ig.module('game.entities.gates.gate').requires('impact.entity', 'game.entities.message').defines(function() {
    return window.EntityGate = ig.Entity.extend({
      spriteSize: {
        x: 48,
        y: 48
      },
      size: {
        x: 48,
        y: 48
      },
      difficulty: 1,
      font: new ig.Font('media/helvetica32000.png'),
      _wmScalable: true,
      collides: ig.Entity.COLLIDES.FIXED,
      checkAgainst: ig.Entity.TYPE.A,
      init: function(x, y, settings) {
        this.parent(x, y, settings);
        return this.animSheet = new ig.AnimationSheet('media/tileset.png', this.spriteSize.x, this.spriteSize.y);
      },
      check: function() {
        this.parent();
        if (ig.game.state === 'main') {
          if (this.passable()) {
            ig.game.state = 'problem';
            ig.game.gate = this;
            this.makeQuestion();
            return this.player_answer = "";
          } else {
            return ig.game.spawnEntity(EntityMessage, this.failMessage());
          }
        }
      },
      passable: function() {
        return this.difficulty <= ig.game.stats[this.gateType].level;
      },
      checkAnswer: function() {
        return this.correct_answer.toString() === this.player_answer;
      },
      update: function() {
        var i, _i;
        for (i = _i = 0; _i <= 9; i = ++_i) {
          if (ig.input.pressed(i.toString())) {
            this.player_answer = this.player_answer + i;
          }
        }
        return this.parent();
      },
      reward: function() {
        var message, stats;
        this.notice = "";
        stats = ig.game.stats;
        this.gainMoney(stats);
        this.gainXp(stats);
        message = ig.game.spawnEntity(EntityMessage, this.notice);
        message.pos.y += 50;
        return ig.game.save();
      },
      gainXp: function(stats) {
        var statRaised, xpGained;
        statRaised = stats[this.gateType];
        xpGained = Math.floor(Math.pow(this.difficulty + 1, 1.5) * 10);
        statRaised.experience += xpGained;
        if (statRaised.experience >= ig.game.experienceRequired(statRaised.level)) {
          statRaised.experience = 0;
          statRaised.level += 1;
          this.notice += "LEVEL UP!\n";
          return this.notice += "level " + statRaised.level + " " + this.gateType;
        } else {
          return this.notice += "+ " + xpGained + "xp";
        }
      },
      gainMoney: function(stats) {
        var moneyGained;
        moneyGained = Math.floor(Math.pow(this.difficulty + 1, 1.7) * (1 + Math.random()));
        stats.money += moneyGained;
        return this.notice += "+ $" + moneyGained + "/n";
      },
      draw: function() {
        var ctx, i, j, numColumns, numRows, _i, _j;
        ctx = ig.system.context;
        ctx.save();
        ctx.translate(ig.system.getDrawPos(this.pos.x - this.offset.x - ig.game.screen.x), ig.system.getDrawPos(this.pos.y - this.offset.y - ig.game.screen.y));
        numColumns = Math.floor(this.size.x / this.spriteSize.x);
        numRows = Math.floor(this.size.y / this.spriteSize.y);
        for (i = _i = 0; 0 <= numColumns ? _i < numColumns : _i > numColumns; i = 0 <= numColumns ? ++_i : --_i) {
          for (j = _j = 0; 0 <= numRows ? _j < numRows : _j > numRows; j = 0 <= numRows ? ++_j : --_j) {
            this.currentAnim.draw(i * this.spriteSize.x, j * this.spriteSize.y);
          }
        }
        this.font.draw(this.difficulty, 5, 5);
        return ctx.restore();
      }
    });
  });

}).call(this);
