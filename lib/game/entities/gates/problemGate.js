// Generated by CoffeeScript 1.3.3
(function() {

  ig.module('game.entities.gates.problemGate').requires('game.entities.gates.gate').defines(function() {
    return window.EntityProblemGate = EntityGate.extend({
      makeChallenge: function() {
        this.parent();
        this["interface"] = ig.game.spawnEntity(EntityProblemInterface, null, null, {
          question: this.question
        });
        return this["interface"].delegate = this;
      },
      passable: function() {
        return this.difficulty <= ig.game.stats[this.gateType].level;
      },
      reward: function() {
        var message, stats;
        this.notice = "";
        stats = ig.game.stats;
        this.gainMoney(stats);
        this.gainXp(stats);
        message = ig.game.spawnEntity(EntityMessage, this.notice);
        message.pos.y += 50;
        return ig.game.save();
      },
      gainXp: function(stats) {
        var statRaised, xpGained;
        statRaised = stats[this.gateType];
        xpGained = Math.floor(Math.pow(this.difficulty + 1, 1.5) * 10);
        statRaised.experience += xpGained;
        if (statRaised.experience >= ig.game.experienceRequired(statRaised.level)) {
          statRaised.experience = 0;
          statRaised.level += 1;
          this.notice += "LEVEL UP!\n";
          return this.notice += "level " + statRaised.level + " " + this.gateType;
        } else {
          return this.notice += "+ " + xpGained + "xp";
        }
      },
      gainMoney: function(stats) {
        var moneyGained;
        moneyGained = Math.floor(Math.pow(this.difficulty + 1, 1.7) * 1);
        stats.money += moneyGained;
        return this.notice += "+ $" + moneyGained + "/n";
      },
      update: function() {
        var i, _i;
        for (i = _i = 0; _i <= 9; i = ++_i) {
          if (ig.input.pressed(i.toString())) {
            this["interface"].playerAnswer += i;
          }
        }
        if (ig.game.state === 'problem') {
          if (ig.input.state('accept')) {
            this.resolve();
          }
        }
        return this.parent();
      },
      resolve: function() {
        var correct, timer;
        correct = this.checkAnswer();
        timer = ig.game.getEntitiesByType(EntityTimer)[0];
        if (correct) {
          this.reward();
          this.kill();
          timer.change(5);
        } else {
          timer.change(-5);
        }
        return this.parent();
      },
      checkAnswer: function() {
        var correct;
        correct = this.correct_answer.toString() === this["interface"].playerAnswer;
        ig.game.record("" + this.gateType + "Gate", correct ? "correct" : "wrong", this.difficulty);
        return correct;
      }
    });
  });

}).call(this);
