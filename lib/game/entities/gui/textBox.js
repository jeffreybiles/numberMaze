// Generated by CoffeeScript 1.3.3
(function() {

  ig.module('game.entities.gui.textBox').requires('game.entities.gui.rectangle').defines(function() {
    return window.EntityTextBox = EntityRectangle.extend({
      init: function(x, y, settings) {
        this.parent(x, y, settings);
        this.text = settings.text;
        this.font = settings.font || new ig.Font('media/helvetica24000.png');
        this.splitLines(this.text, this.font, this.width);
        return this.fontHeight = this.font.height * 4 / 5;
      },
      draw: function() {
        this.parent();
        return this.drawText(this.allLines);
      },
      drawText: function(text) {
        var i, line, _i, _ref, _results;
        _results = [];
        for (i = _i = 0, _ref = text.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
          line = text[i];
          _results.push(this.font.draw(line, this.x, this.y + i * this.fontHeight, ig.Font.ALIGN.LEFT));
        }
        return _results;
      },
      splitLines: function(text, font, maxTextWidth) {
        var i, lastWord, lineWidth, nextWord, word, wordWidth, words, _i, _ref;
        words = text.split(' ');
        lastWord = words[words.length - 1];
        lineWidth = 0;
        wordWidth = 0;
        this.thisLine = '';
        this.allLines = new Array();
        for (i = _i = 0, _ref = words.length; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
          word = words[i];
          if (word !== '') {
            this.thisLine = this.thisLine.concat(word + ' ');
          }
          lineWidth = this.font.widthForString(this.thisLine);
          if (word !== lastWord) {
            nextWord = words[i + 1];
            if (lineWidth + this.font.widthForString(nextWord) >= maxTextWidth) {
              this.addToAllLines(this.thisLine);
            } else if (word === '~') {
              this.addToAllLines(' ');
            } else if (nextWord === '~') {
              this.addToAllLines(this.thisLine);
            }
          } else {
            this.addToAllLines(this.thisLine);
            return this.allLines;
          }
        }
      },
      addToAllLines: function(text) {
        this.allLines.push(text.slice(0, -1));
        return this.thisLine = '';
      }
    });
  });

}).call(this);
